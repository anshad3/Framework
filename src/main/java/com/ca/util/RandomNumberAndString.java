package com.ca.util;

import java.util.Random;

import org.apache.commons.lang3.RandomStringUtils;

public class RandomNumberAndString {

	/**
	 * This function generates random integer number with given range between min and max.
	 * Example generateRandInt(10,20) can return like "14", "11" and "17".
	 * 
	 * @param min integer number
	 * @param max integer number
	 * @return returns a random number between min and max values provided by the caller
	 * 
	 * 
	 * @throws Exception if min<max
	 */
	
	public  Long generateRandInt(int min,int max) {
	
		if(max<min)
			throw new IllegalArgumentException("max should be greater than min but function is called using min="+min+" max="+max);
		Random randI = new Random();   
		long randomNumII = randI.nextInt(max-min)+min;
	    return randomNumII;
	}
	
	/**
	 * This function generates random string of length "length"  and characters of the output will be one or many of the 
	 * characters present in the characterString
	 * 
	 * Example:  generateRandomString(4,"abcdefgh")  can return "adef"  or "bghe"  or like this
	 * 
	 * @param length  number of characters in the output string
	 * @param characterString the random string is generated by using character in this string input.
	 * @return  returns random string of length "length"  and characters of the output will be one or many of the 
	 * characters present in the characterString
	 * 
	 * 
	 * @throws Exception 
	 */
	public  String generateRandomString(int length, String characterString) throws Exception{
			if(((length<=0)&&((characterString.isEmpty())&&(characterString.contains(" ")))))
				throw new Exception("length should be greater than zero and string is not empty"+length);
		String result=RandomStringUtils.random(length, characterString);
		return result;
	}
	
	 /**
	 * This function generates random string of a given length.
	 * Example: generateRandomString(10) can return "lxrcLvWjAs","awRXBAgzUu" and "EUnjyCQGFn" will get like this string.
	 * 
	 * @parm length number of characters in the output string
	 * @return returns random string based on length
	 * 
	 * 
	 * @throws Exception if length is less than zero.
	 */
	
	public String generateRandomString(int length) throws Exception{
		if(length<=0)
			throw new Exception("length should be greater than zero"+length);
		 String  result = RandomStringUtils.randomAlphabetic(length);
		 return result;
	}
	
	/**
	 * This function generates random double number.
	 * the generated value will be between 4.9E-324 to 1.7976931348623157E308
	 * Example generateRandFloat() can return "0.7679642764998654","0.1679642764998654" and "0.3679642764998654" will get like this values.
	 * 
	 * @return returns random double number
	 * 
	 * 
	 */
	public  double generateRandDouble(){
		
		 	Random randF = new Random(); 
		 	double randomNumF=randF.nextDouble();
		    return randomNumF;
	}
	
	/**
	 * This function generates random long number.
	 * the generated value will be between -9223372036854775808 to 9223372036854775807 
	 * Example generateRandLong() can return "4514604694799660010","1514604694799660010" and "514604694799660010" will get like this values.
	 * 
	 * @return returns random long number
	 * 
	 * 
	 */
	public  long generateRandLong(){
		
		 	Random randI = new Random();	    
		 	long randomNumI=randI.nextLong();
		    return randomNumI;
	}
	
	/**
	 * This function generates random float number with given range between min and max.
	 * Example generateRandFloat(10.3f,20.43f) can return "14.300000190734863", "11.300000190734863" and "17.299999237060547" will get like this float value.
	 * 
	 * @param min float number in the output
	 * @param max float number in the output
	 * @return returns random number between min and max floating number
	 * 
	 * 
	 * @throws Exception 
	 */
	
	public  double generateRandDouble(float min,float max) throws Exception{
		if(max<=min)
			throw new Exception("max should be greater than min but function is called using min="+min+" max="+max);
		Random randFF = new Random();
		double randomNumFF = randFF.nextInt((int) (max-min))+min;
	    return randomNumFF;
	}
	
}
